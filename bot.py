import os, json, base64
from oauth2client.service_account import ServiceAccountCredentials
import gspread

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# =======================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =======================
TOKEN = os.environ["TOKEN"]
ADMIN_ID = int(os.environ["ADMIN_ID"])

# =======================
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
# =======================
creds_json = base64.b64decode(os.environ["GOOGLE_CREDS"])
creds_dict = json.loads(creds_json)

scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ").worksheet("–≥—Ä–∞—Ñ–∏–∫")  # –∏–º—è –ª–∏—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞

# =======================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# =======================
main_menu = [["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "‚ÑπÔ∏è –ò–Ω—Ñ–æ"]]

# =======================
# –•—ç–Ω–¥–ª–µ—Ä—ã
# =======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        context.user_data["step"] = "name"

    elif context.user_data.get("step") == "name":
        context.user_data["name"] = text
        context.user_data["step"] = "choose_slot"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
        all_slots = sheet.get_all_values()[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        free_slots = [row[0].strip() for row in all_slots if row[1].strip() == ""]

        if not free_slots:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            context.user_data.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        slot_buttons = [[s] for s in free_slots]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=ReplyKeyboardMarkup(slot_buttons, resize_keyboard=True)
        )

    elif context.user_data.get("step") == "choose_slot":
        name = context.user_data["name"]
        slot = text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        try:
            cell = sheet.find(slot)
        except gspread.CellNotFound:
            await update.message.reply_text("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        current_value = sheet.cell(cell.row, 2).value
        if current_value not in ("", None):
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
        sheet.update_cell(cell.row, 2, name)        # –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        sheet.update_cell(cell.row, 3, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")  # —É—Å–ª—É–≥–∞

        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞!\n–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n–ö–æ–≥–¥–∞: {slot}",
            reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            ADMIN_ID,
            f"üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n–ö–æ–≥–¥–∞: {slot}"
        )

        context.user_data.clear()

    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å.")

    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# =======================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =======================
if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
