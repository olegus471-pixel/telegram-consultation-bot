import os
import json
import base64
import asyncio
from oauth2client.service_account import ServiceAccountCredentials
import gspread

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# =======================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =======================
TOKEN = os.environ["TOKEN"]
ADMIN_ID = int(os.environ["ADMIN_ID"])
PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_URL = "https://telegram-consultation-bot.onrender.com/webhook"

# =======================
# Google Sheets
# =======================
creds_json = base64.b64decode(os.environ["GOOGLE_CREDS"])
creds_dict = json.loads(creds_json)

scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ").worksheet("–ì—Ä–∞—Ñ–∏–∫")

# =======================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# =======================
main_menu = [["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall", "‚ÑπÔ∏è –ò–Ω—Ñ–æ"]]

# =======================
# –•—ç–Ω–¥–ª–µ—Ä—ã
# =======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º:")
        context.user_data["step"] = "name"
        return

    if context.user_data.get("step") == "name":
        context.user_data["name"] = text
        context.user_data["step"] = "choose_slot"
        all_slots = sheet.get_all_values()[1:]
        free_slots = [row[0].strip() for row in all_slots if row[1].strip() == ""]
        if not free_slots:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            context.user_data.clear()
            return
        slot_buttons = [[s] for s in free_slots]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=ReplyKeyboardMarkup(slot_buttons, resize_keyboard=True)
        )
        return

    if context.user_data.get("step") == "choose_slot":
        name = context.user_data["name"]
        slot = text
        try:
            cell = sheet.find(slot)
        except gspread.CellNotFound:
            await update.message.reply_text("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        if sheet.cell(cell.row, 2).value not in ("", None):
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        sheet.update_cell(cell.row, 2, name)
        sheet.update_cell(cell.row, 3, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
        await update.message.reply_text(
            f"""‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞! 
            –û–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–ª–∞—Ç–Ω–∞—è - 120 Euro. –ö —Å—É–º–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω IVA. 
            –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Äe–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É @migrallpt \n–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n–ö–æ–≥–¥–∞: {slot}""",
            reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
        )
        await context.bot.send_message(
            ADMIN_ID,
            f"üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ò–º—è: {name}\n–£—Å–ª—É–≥–∞: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n–ö–æ–≥–¥–∞: {slot}"
        )
        context.user_data.clear()
        return

    if text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
        await update.message.reply_text(
                 """–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏ üáµüáπ –∏ –ò—Å–ø–∞–Ω–∏–∏ üá™üá∏ 

–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –Ω—é–∞–Ω—Å–∞–º–∏ –ø–µ—Ä–µ–µ–∑–¥–∞ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.

üîπ –ß—Ç–æ —Ä–∞–∑–±–µ—Ä–µ–º –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–µ–Ω–Ω–æ –≤–∞—à –∫–µ–π—Å
‚úÖ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏–∏
‚úÖ –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω, –≤–∫–ª—é—á–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏
‚úÖ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 120 ‚Ç¨
‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å

*–ö —Å—É–º–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –ù–î–° 23%

üìå –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?
1Ô∏è‚É£ –°–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ–º —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
2Ô∏è‚É£ –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ (–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –†–§ –∫–∞—Ä—Ç—É, –∫—Ä–∏–ø—Ç–∞, IBAN –≤ –µ–≤—Ä–æ)
3Ô∏è‚É£ –ü–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É (Google Meet)
4Ô∏è‚É£ –ü—Ä–æ–≤–æ–¥–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
5Ô∏è‚É£ –ü–æ—Å–ª–µ –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Å–≤—è–∑–∏ –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

üì© –ì–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ ‚Äì –ø–æ–º–æ–∂–µ–º!"""
        )
        return

    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# =======================
# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# =======================
app = Application.builder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# =======================
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (–±–µ–∑ asyncio.run)
# =======================
async def main():
    await app.bot.set_webhook(WEBHOOK_URL)
    print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

    await app.initialize()
    await app.start()
    await app.updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=WEBHOOK_URL,
    )
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Webhook")

    # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    await asyncio.Event().wait()

# –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º loop
loop = asyncio.get_event_loop()
loop.create_task(main())
loop.run_forever()
