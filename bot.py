import os
import json
import base64
import asyncio
import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
import gspread

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# =======================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =======================
TOKEN = os.environ["TOKEN"]
ADMIN_ID = int(os.environ["ADMIN_ID"])
PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_URL = "https://telegram-consultation-bot.onrender.com/webhook"

# =======================
# Google Sheets (–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
# =======================
sheets_creds_json = base64.b64decode(os.environ["GOOGLE_SHEETS_CREDS"])
sheets_creds_dict = json.loads(sheets_creds_json)
sheets_creds = gspread.service_account_from_dict(sheets_creds_dict)
sheets_client = gspread.authorize(sheets_creds)
sheet = sheets_client.open("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ").worksheet("–ì—Ä–∞—Ñ–∏–∫")

# =======================
# Google Calendar (ops@migrall.com)
# =======================
calendar_creds_json = base64.b64decode(os.environ["GOOGLE_CALENDAR_CREDS"])
calendar_creds_dict = json.loads(calendar_creds_json)

SCOPES = ['https://www.googleapis.com/auth/calendar']
SERVICE_ACCOUNT_EMAIL = 'ops@migrall.com'  # Workspace –∞–∫–∫–∞—É–Ω—Ç
credentials = service_account.Credentials.from_service_account_info(
    calendar_creds_dict, scopes=SCOPES
)
delegated_credentials = credentials.with_subject(SERVICE_ACCOUNT_EMAIL)
calendar_service = build('calendar', 'v3', credentials=delegated_credentials)

# =======================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# =======================
main_menu = [["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall", "‚ÑπÔ∏è –ò–Ω—Ñ–æ"]]

# =======================
# –•—ç–Ω–¥–ª–µ—Ä—ã
# =======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user = update.message.from_user
    user_id = user.id
    username = user.username if user.username else f"{user.first_name} {user.last_name or ''}"

    # === –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ ===
    if text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall":
        all_slots = sheet.get_all_values()
        for row in all_slots[1:]:
            if str(user_id) in row:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å. –ü–µ—Ä–µ–Ω–æ—Å –≤–æ–∑–º–æ–∂–µ–Ω, –Ω–æ –Ω–µ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å.")
                return

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–¥–ª—è –∑–∞–ø–∏—Å–∏):")
        context.user_data["step"] = "name"
        return

    # === –ü–æ–ª—É—á–∞–µ–º –∏–º—è ===
    if context.user_data.get("step") == "name":
        context.user_data["name"] = text
        context.user_data["step"] = "choose_slot"

        all_slots = sheet.get_all_values()[1:]
        free_slots = [row[1].strip() for row in all_slots if row[2].strip() == ""]  # B = —Å–ª–æ—Ç, C = –∏–º—è
        if not free_slots:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            context.user_data.clear()
            return

        slot_buttons = [[s] for s in free_slots]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=ReplyKeyboardMarkup(slot_buttons, resize_keyboard=True)
        )
        return

    # === –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ—Ç ===
    if context.user_data.get("step") == "choose_slot":
        name = context.user_data["name"]
        slot = text
        try:
            cell = sheet.find(slot)
        except gspread.CellNotFound:
            await update.message.reply_text("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        if sheet.cell(cell.row, 3).value not in ("", None):
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
        sheet.update_cell(cell.row, 3, name)        # C - –∏–º—è
        sheet.update_cell(cell.row, 4, username)    # D - username
        sheet.update_cell(cell.row, 5, str(user_id)) # E - user_id
        sheet.update_cell(cell.row, 6, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è") # F - —É—Å–ª—É–≥–∞
        sheet.update_cell(cell.row, 7, "0")         # G - –ø–µ—Ä–µ–Ω–æ—Å—ã
        sheet.update_cell(cell.row, 8, "0")         # H - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        sheet.update_cell(cell.row, 9, "")          # I - email
        sheet.update_cell(cell.row, 10, "")         # J - meet_link

        context.user_data["slot_row"] = cell.row

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Å—Å—ã–ª–∫—É Meet
        await update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Meet –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π?",
            reply_markup=ReplyKeyboardMarkup([["–°–µ–π—á–∞—Å", "–ü–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π"]], resize_keyboard=True)
        )
        context.user_data["step"] = "meet_option"
        return

    # === –í—ã–±–æ—Ä Meet ===
    if context.user_data.get("step") == "meet_option":
        row = context.user_data["slot_row"]
        if text == "–°–µ–π—á–∞—Å":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏:")
            context.user_data["step"] = "get_email"
            return
        elif text == "–ü–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π":
            await update.message.reply_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π.")
            sheet.update_cell(row, 10, "pending")  # –æ—Ç–º–µ—Ç–∫–∞ –¥–ª—è Meet —Å—Å—ã–ª–∫–∏ –ø–æ–∑–∂–µ
            context.user_data.clear()
            return
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: –°–µ–π—á–∞—Å –∏–ª–∏ –ü–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π.")
            return

    # === –ü–æ–ª—É—á–∞–µ–º email –∏ —Å–æ–∑–¥–∞—ë–º Meet ===
    if context.user_data.get("step") == "get_email":
        email = text.strip()
        row = context.user_data["slot_row"]
        slot_time_str = sheet.cell(row, 2).value.strip()

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        try:
            slot_time = datetime.datetime.strptime(slot_time_str, "%d.%m.%Y, %H:%M")
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.")
            context.user_data.clear()
            return

        # —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        event = {
            'summary': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è Migrall',
            'description': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–µ—Ä–µ–µ–∑–¥—É',
            'start': {'dateTime': slot_time.isoformat(), 'timeZone': 'Europe/Lisbon'},
            'end': {'dateTime': (slot_time + datetime.timedelta(hours=1)).isoformat(), 'timeZone': 'Europe/Lisbon'},
            'attendees': [{'email': email}],
            'conferenceData': {
                'createRequest': {
                    'requestId': f'unique-{user_id}',
                    'conferenceSolutionKey': {'type': 'hangoutsMeet'}
                }
            }
        }

        try:
            created_event = calendar_service.events().insert(
                calendarId=SERVICE_ACCOUNT_EMAIL,
                body=event,
                conferenceDataVersion=1
            ).execute()
            meet_link = created_event['conferenceData']['entryPoints'][0]['uri']
            sheet.update_cell(row, 9, email)
            sheet.update_cell(row, 10, meet_link)
            await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet –≤—ã—Å–ª–∞–Ω–∞ –Ω–∞ {email}:\n{meet_link}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}")

        context.user_data.clear()
        return

    # === –ò–Ω—Ñ–æ ===
    if text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
        await update.message.reply_text(
            """–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏ üáµüáπ –∏ –ò—Å–ø–∞–Ω–∏–∏ üá™üá∏ 

üîπ –ß—Ç–æ —Ä–∞–∑–±–µ—Ä–µ–º –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –∫–µ–π—Å
‚úÖ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏–∏
‚úÖ –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω
‚úÖ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 120 ‚Ç¨
‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å

*–ö —Å—É–º–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –ù–î–° 23%"""
        )
        return

    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# =======================
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ Meet-—Å—Å—ã–ª
