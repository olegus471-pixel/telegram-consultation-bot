import os
import json
import base64
import asyncio
import datetime
from oauth2client.service_account import ServiceAccountCredentials
import gspread
from googleapiclient.discovery import build
from google.oauth2.service_account import Credentials

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# =======================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =======================
TOKEN = os.environ["TOKEN"]
ADMIN_ID = int(os.environ["ADMIN_ID"])
PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_URL = "https://telegram-consultation-bot.onrender.com/webhook"

# =======================
# Google Sheets
# =======================
sheets_creds_json = base64.b64decode(os.environ["GOOGLE_SHEETS_CREDS"])
sheets_creds_dict = json.loads(sheets_creds_json)

sheets_scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
sheets_creds = ServiceAccountCredentials.from_json_keyfile_dict(sheets_creds_dict, sheets_scope)
sheets_client = gspread.authorize(sheets_creds)
sheet = sheets_client.open("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ").worksheet("–ì—Ä–∞—Ñ–∏–∫")

# =======================
# Google Calendar (Meet)
# =======================
calendar_creds_json = base64.b64decode(os.environ["GOOGLE_CALENDAR_CREDS"])
calendar_creds_dict = json.loads(calendar_creds_json)

calendar_scopes = [
    "https://www.googleapis.com/auth/calendar",
    "https://www.googleapis.com/auth/calendar.events"
]

# ‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ops@migrall.com
calendar_credentials = Credentials.from_service_account_info(
    calendar_creds_dict,
    scopes=calendar_scopes,
    subject="ops@migrall.com"
)

calendar_service = build("calendar", "v3", credentials=calendar_credentials)
CALENDAR_ID = "ops@migrall.com"

# =======================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# =======================
main_menu = [["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall", "‚ÑπÔ∏è –ò–Ω—Ñ–æ"]]

# =======================
# –•—ç–Ω–¥–ª–µ—Ä—ã
# =======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user = update.message.from_user
    user_id = user.id
    username = user.username if user.username else f"{user.first_name} {user.last_name or ''}"

    # === –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ ===
    if text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall":
        all_slots = sheet.get_all_values()
        for row in all_slots[1:]:
            if str(user_id) in row:  # —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å
                await update.message.reply_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å. –ü–µ—Ä–µ–Ω–æ—Å –≤–æ–∑–º–æ–∂–µ–Ω, –Ω–æ –Ω–µ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å.")
                return

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–¥–ª—è –∑–∞–ø–∏—Å–∏):")
        context.user_data["step"] = "name"
        return

    # === –ü–æ–ª—É—á–∞–µ–º –∏–º—è ===
    if context.user_data.get("step") == "name":
        context.user_data["name"] = text
        context.user_data["step"] = "choose_slot"

        all_slots = sheet.get_all_values()[1:]
        free_slots = [row[1].strip() for row in all_slots if row[2].strip() == ""]  # –∫–æ–ª–æ–Ω–∫–∞ B = —Å–ª–æ—Ç, C = –∏–º—è
        if not free_slots:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            context.user_data.clear()
            return

        slot_buttons = [[s] for s in free_slots]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=ReplyKeyboardMarkup(slot_buttons, resize_keyboard=True)
        )
        return

    # === –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ—Ç ===
    if context.user_data.get("step") == "choose_slot":
        name = context.user_data["name"]
        slot = text
        try:
            cell = sheet.find(slot)
        except gspread.CellNotFound:
            await update.message.reply_text("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        if sheet.cell(cell.row, 3).value not in ("", None):
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sheet.update_cell(cell.row, 3, name)         # –∏–º—è
        sheet.update_cell(cell.row, 4, username)     # username
        sheet.update_cell(cell.row, 5, str(user_id)) # user_id
        sheet.update_cell(cell.row, 6, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
        sheet.update_cell(cell.row, 7, "0")          # –ø–µ—Ä–µ–Ω–æ—Å—ã
        sheet.update_cell(cell.row, 8, "0")          # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        sheet.update_cell(cell.row, 9, "")           # email
        sheet.update_cell(cell.row, 10, "")          # meet_link

        context.user_data["slot_row"] = cell.row

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Å—Å—ã–ª–∫—É Meet
        await update.message.reply_text(
            f"‚úÖ {name}, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞ {slot}.\n\n"
            "–û–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ 120 –ï–≤—Ä–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –ù–î–° 23%)."
            "–ï—Å–ª–∏ –í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ @migrallpt."
            "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Meet –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π?",
            reply_markup=ReplyKeyboardMarkup([["–°–µ–π—á–∞—Å", "–ü–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π"]], resize_keyboard=True)
        )
        context.user_data["step"] = "meet_option"
        return

    # === –í—ã–±–æ—Ä Meet ===
    if context.user_data.get("step") == "meet_option":
        row = context.user_data["slot_row"]
        if text == "–°–µ–π—á–∞—Å":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏:")
            context.user_data["step"] = "get_email"
            return
        elif text == "–ü–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π":
            await update.message.reply_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π.")
            sheet.update_cell(row, 10, "pending")
            context.user_data.clear()
            return
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: –°–µ–π—á–∞—Å –∏–ª–∏ –ü–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π.")
            return

    # === –ü–æ–ª—É—á–∞–µ–º email –∏ —Å–æ–∑–¥–∞—ë–º Meet ===
    if context.user_data.get("step") == "get_email":
        email = text.strip()
        row = context.user_data["slot_row"]
        slot_time_str = sheet.cell(row, 2).value.strip()

        try:
            slot_time = datetime.datetime.strptime(slot_time_str, "%d.%m.%Y, %H:%M")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞.")
            context.user_data.clear()
            return

        try:
            event = {
                "summary": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è Migrall",
                "description": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–µ—Ä–µ–µ–∑–¥—É.",
                "start": {"dateTime": slot_time.isoformat(), "timeZone": "Europe/Lisbon"},
                "end": {"dateTime": (slot_time + datetime.timedelta(hours=1)).isoformat(), "timeZone": "Europe/Lisbon"},
                "attendees": [{"email": email}],
                "conferenceData": {
                    "createRequest": {
                        "requestId": f"migrall-{user_id}-{int(datetime.datetime.now().timestamp())}",
                        "conferenceSolutionKey": {"type": "hangoutsMeet"},
                    }
                },
            }

            created_event = calendar_service.events().insert(
                calendarId=CALENDAR_ID,
                body=event,
                conferenceDataVersion=1
            ).execute()

            meet_link = created_event.get("hangoutLink", "–°—Å—ã–ª–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            sheet.update_cell(row, 9, email)
            sheet.update_cell(row, 10, meet_link)

            await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet –≤—ã—Å–ª–∞–Ω–∞ –Ω–∞ {email}:\n{meet_link}"
                                           "–ó–∞ 24 —á–∞—Å–∞ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º."
                                           )

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}")

        context.user_data.clear()
        return

    # === –ò–Ω—Ñ–æ ===
    if text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
        await update.message.reply_text(
            """–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏ üáµüáπ –∏ –ò—Å–ø–∞–Ω–∏–∏ üá™üá∏ 

–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –Ω—é–∞–Ω—Å–∞–º–∏ –ø–µ—Ä–µ–µ–∑–¥–∞ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.

üîπ –ß—Ç–æ —Ä–∞–∑–±–µ—Ä–µ–º –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?
‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–µ–Ω–Ω–æ –≤–∞—à –∫–µ–π—Å
‚úÖ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏–∏
‚úÖ –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω, –≤–∫–ª—é—á–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏
‚úÖ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 120 ‚Ç¨
‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å

–ö —Å—É–º–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –ù–î–° 23%

üìå –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?
1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—Ç–µ —Å–ª–æ—Ç
2Ô∏è‚É£ –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ (–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –†–§ –∫–∞—Ä—Ç—É, –∫—Ä–∏–ø—Ç–∞, IBAN –≤ –µ–≤—Ä–æ)
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É Google Meet
4Ô∏è‚É£ –ü—Ä–æ–≤–æ–¥–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
5Ô∏è‚É£ –ü–æ—Å–ª–µ –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Å–≤—è–∑–∏ –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

üì© –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ –≤ @migrallpt ‚Äì –ø–æ–º–æ–∂–µ–º!"""
        )
        return

    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# =======================
# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ Meet –ø–µ—Ä–µ–¥ –≤—Å—Ç—Ä–µ—á–µ–π
# =======================
async def background_jobs(app: Application):
    while True:
        all_slots = sheet.get_all_values()[1:]
        now = datetime.datetime.now()

        for row in all_slots:
            slot_time_str = row[1].strip() if len(row) > 1 else ""
            user_id = row[4].strip() if len(row) > 4 else ""
            meet_status = row[10].strip() if len(row) > 10 else ""
            reminded = row[8].strip() if len(row) > 8 else "0"

            if not slot_time_str or not user_id:
                continue

            try:
                slot_time = datetime.datetime.strptime(slot_time_str, "%d.%m.%Y, %H:%M")
            except ValueError:
                continue

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
            if reminded == "0" and 0 < (slot_time - now).total_seconds() <= 86400:
                try:
                    await app.bot.send_message(int(user_id), f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º! –£ –≤–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è {slot_time_str}.")
                    cell = sheet.find(slot_time_str)
                    sheet.update_cell(cell.row, 8, "1")
                except:
                    pass

            # –û—Ç–ø—Ä–∞–≤–∫–∞ Meet –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –≤—Å—Ç—Ä–µ—á–∏
            if meet_status == "pending" and 0 < (slot_time - now).total_seconds() <= 900:
                email = row[9].strip() if len(row) > 9 else None
                if email:
                    try:
                        event = {
                            "summary": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è Migrall",
                            "description": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–µ—Ä–µ–µ–∑–¥—É.",
                            "start": {"dateTime": slot_time.isoformat(), "timeZone": "Europe/Lisbon"},
                            "end": {"dateTime": (slot_time + datetime.timedelta(hours=1)).isoformat(), "timeZone": "Europe/Lisbon"},
                            "attendees": [{"email": email}],
                            "conferenceData": {
                                "createRequest": {
                                    "requestId": f"migrall-{user_id}-{int(datetime.datetime.now().timestamp())}",
                                    "conferenceSolutionKey": {"type": "hangoutsMeet"},
                                }
                            },
                        }
                        created_event = calendar_service.events().insert(
                            calendarId=CALENDAR_ID,
                            body=event,
                            conferenceDataVersion=1
                        ).execute()

                        meet_link = created_event.get("hangoutLink", "–°—Å—ã–ª–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                        cell = sheet.find(slot_time_str)
                        sheet.update_cell(cell.row, 10, meet_link)
                        await app.bot.send_message(int(user_id), f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet:\n{meet_link}")
                    except:
                        pass

        await asyncio.sleep(60)

# =======================
# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# =======================
app = Application.builder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# =======================
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
# =======================
async def main():
    await app.bot.set_webhook(WEBHOOK_URL)
    await app.initialize()
    await app.start()
    await app.updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=WEBHOOK_URL,
    )
    asyncio.create_task(background_jobs(app))
    await asyncio.Event().wait()

loop = asyncio.get_event_loop()
loop.create_task(main())
loop.run_forever()
