import os
import json
import base64
import asyncio
import datetime
import smtplib
from email.mime.text import MIMEText
from oauth2client.service_account import ServiceAccountCredentials
import gspread
from googleapiclient.discovery import build
from google.oauth2.service_account import Credentials

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# =======================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =======================
TOKEN = os.environ["TOKEN"]
ADMIN_ID = int(os.environ["ADMIN_ID"])
PORT = int(os.environ.get("PORT", 10000))
WEBHOOK_URL = "https://telegram-consultation-bot.onrender.com/webhook"

# =======================
# Google Sheets (–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
# =======================
sheets_creds_json = base64.b64decode(os.environ["GOOGLE_SHEETS_CREDS"])
sheets_creds_dict = json.loads(sheets_creds_json)

sheets_scope = ["https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"]
sheets_creds = ServiceAccountCredentials.from_json_keyfile_dict(sheets_creds_dict, sheets_scope)
sheets_client = gspread.authorize(sheets_creds)
sheet = sheets_client.open("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ").worksheet("–ì—Ä–∞—Ñ–∏–∫")

# =======================
# Google Calendar (Meet)
# =======================
calendar_creds_json = base64.b64decode(os.environ["GOOGLE_CALENDAR_CREDS"])
calendar_creds_dict = json.loads(calendar_creds_json)

calendar_scopes = ['https://www.googleapis.com/auth/calendar']
calendar_credentials = Credentials.from_service_account_info(calendar_creds_dict, scopes=calendar_scopes)
calendar_service = build('calendar', 'v3', credentials=calendar_credentials)
CALENDAR_ID = 'migrallportugal@gmail.com'

# =======================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# =======================
main_menu = [["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall", "‚ÑπÔ∏è –ò–Ω—Ñ–æ"]]

# =======================
# –•—ç–Ω–¥–ª–µ—Ä—ã
# =======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user = update.message.from_user
    user_id = user.id
    username = user.username if user.username else f"{user.first_name} {user.last_name or ''}"

    # === –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ ===
    if text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é Migrall":
        all_slots = sheet.get_all_values()
        for row in all_slots[1:]:
            if str(user_id) in row:  # —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å
                await update.message.reply_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å. –ü–µ—Ä–µ–Ω–æ—Å –≤–æ–∑–º–æ–∂–µ–Ω, –Ω–æ –Ω–µ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å.")
                return

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–¥–ª—è –∑–∞–ø–∏—Å–∏):")
        context.user_data["step"] = "name"
        return

    # === –ü–æ–ª—É—á–∞–µ–º –∏–º—è ===
    if context.user_data.get("step") == "name":
        context.user_data["name"] = text
        context.user_data["step"] = "choose_slot"

        all_slots = sheet.get_all_values()[1:]
        free_slots = [row[1].strip() for row in all_slots if row[2].strip() == ""]  # –∫–æ–ª–æ–Ω–∫–∞ B = —Å–ª–æ—Ç, C = –∏–º—è
        if not free_slots:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            context.user_data.clear()
            return

        slot_buttons = [[s] for s in free_slots]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=ReplyKeyboardMarkup(slot_buttons, resize_keyboard=True)
        )
        return

    # === –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ—Ç ===
    if context.user_data.get("step") == "choose_slot":
        name = context.user_data["name"]
        slot = text
        try:
            cell = sheet.find(slot)
        except gspread.CellNotFound:
            await update.message.reply_text("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        if sheet.cell(cell.row, 3).value not in ("", None):
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sheet.update_cell(cell.row, 3, name)         # –∏–º—è
        sheet.update_cell(cell.row, 4, username)     # username
        sheet.update_cell(cell.row, 5, str(user_id)) # user_id
        sheet.update_cell(cell.row, 6, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è") # —É—Å–ª—É–≥–∞
        sheet.update_cell(cell.row, 7, "0")          # –ø–µ—Ä–µ–Ω–æ—Å—ã
        sheet.update_cell(cell.row, 8, "0")          # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        sheet.update_cell(cell.row, 9, "")           # email –¥–ª—è —Å—Å—ã–ª–∫–∏
        sheet.update_cell(cell.row, 10, "")          # meet_link

        context.user_data["slot_row"] = cell.row

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä
